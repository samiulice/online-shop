{{template "admin" .}}

{{define "title"}}
Transaction
{{end}}

{{define "css"}}
<style>
    .bg-danger {
        background-color: rgb(255, 0, 64);
    }
</style>
{{end}}

{{define "content"}}
{{$v := index .Data "transaction_type" }}
<div class="">
    <div class="row">
        <div class="col-md-12">
            <div class="x_panel">
                <div class="x_content">
                    <div class="row" id="parent">
                        <!-- will be updated by Javascript DOM -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{end}}


{{define "js"}}
{{$v := index .Data "transaction_type" }}
<script>
    let token = localStorage.getItem("token")
    let container = document.getElementById("parent")

    const requestOptions = {
        method: 'post',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token,
        },
    }

    fetch('{{.API}}/api/admin/analytics/transaction/view/{{$v}}', requestOptions)
        .then(response => response.json())
        .then(function (data) {
            console.log(data)
            if (data) {
                if (Object.keys(data)[0] === "error") {
                    console.log("Internal Server Error")
                    container.innerHTML = `<p><b class="text-center" style="color:rgb(255, 0, 76); 
                        width: 30%">Internal Server Error</b></p>`;
                    return;
                }
                data.forEach(function (i) {
                    let amount = formatCurrency(i.amount, i.currency)
                    let createdAt = formatDate(i.created_at)
                    let expMonth = getMonthName(i.expiry_month)
                    container.innerHTML = `
                        <div class="col-md-8 col-sm-12 col-xs-12 profile_details">
                            <div class="well profile_view">
                                <div style="font-size: 15px;" class="col-sm-12">
                                    <h4 class="brief"><i>Transaction Details # ${i.id}</i></h4>
                                    <div class="left col-xs-4">
                                        <ul class="list-unstyled">
                                            <li>Amount: </li>
                                            <li>Currency:</li>
                                            <li>Status:</li>
                                            <li>Payment Intent:</li>
                                            <li>Payment Method:</li>
                                            <li>Last Four Digits:</li>
                                            <li>Bank Return Code:</li>
                                            <li>Card Expiry Date:</li>
                                        </ul>
                                    </div>
                                    <div class="left col-xs-8>
                                        <ul style="font-weight: bold;" class="list-unstyled">
                                            <li style="font-weight: bold;">${amount}</li>
                                            <li style="font-weight: bold;">${i.currency}</li>
                                            <li id="payment_status" class="badge rounded-pill">${i.transaction_status}</li>
                                            <li style="font-weight: bold;">${i.payment_intent}</li>
                                            <li style="font-weight: bold;">${i.payment_method}</li>
                                            <li style="font-weight: bold;">${i.last_four_digits}</li>
                                            <li style="font-weight: bold;">${i.bank_return_code}</li>
                                            <li style="font-weight: bold;">${expMonth}-${i.expiry_year}</li>
                                        </ul>
                                    </div>

                                </div>
                                <div class="col-xs-12 bottom text-center">
                                    <div class="col-xs-12 col-sm-6 emphasis">
                                        <p style="opacity: 0.5;">Transaction Timestamp: ${createdAt}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                    let elem = document.getElementById("payment_status");
                    if (i.transaction_status_id === 1) {
                        elem.classList.add("bg-danger");
                    } else if (i.transaction_status_id === 2) {
                        elem.classList.add("bg-success");
                    } else if (i.transaction_status_id === 3) {
                        elem.classList.add("bg-info");
                    } else {
                        elem.classList.add("bg-warning");
                    }
                })
            } else {
                console.log("No data available")
                container.innerHTML = `<p class="text-center"><b style="color:rgb(255, 0, 76); width: 30%">
                    No data available</b></p>`;
                return;
            }
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });

    function formatDate(time) {
        const input = "2024-06-25T00:00:00Z";

        // Parse the input string into a Date object
        const date = new Date(input);

        // Define arrays for month names and zero-padding for formatting
        const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        const pad = (num) => num.toString().padStart(2, '0');

        // Extract date components
        const day = pad(date.getDate());
        const month = months[date.getMonth()];
        const year = date.getFullYear();
        const hours = pad(date.getHours());
        const minutes = pad(date.getMinutes());
        const seconds = pad(date.getSeconds());

        // Format the date
        const formattedDate = `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;

        return formattedDate

    }
    //print currency into standard format
    function formatCurrency(amount, currency) {
        // Convert cents to taka
        let t = parseFloat(amount / 100);
        let c = currency.toUpperCase()

        // Format the currency using toLocaleString method
        return t.toLocaleString("en-" + c.substring(0, 2), {
            style: "currency",
            currency: c,
        });
    }

    //getMonthName return the month name for month number
    function getMonthName(monthNumber) {
        m = parseInt(monthNumber)
        // Array of month names
        var months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];

        // Check if the month number is valid
        if (m >= 1 && m <= 12) {
            // Return the corresponding month name
            return months[m - 1];
        } else {
            // Return an error message if the month number is invalid
            return "Invalid month number";
        }
    }
</script>
{{end}}