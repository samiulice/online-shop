{{template "base" .}}

{{define "title"}}
    Buy Dates
{{end}}

{{define "css"}}
<link rel="stylesheet" href="/public/assets/css/style.css">
{{end}}

{{define "content"}}
{{$date := index .Data "dates"}}
<div class="container">
    <div class="row mt-3 d-flex justify-content-center">
        {{if eq $date.IsRecurring 1}}
            <u><h3 class="text-center">{{$date.PlanTitle}}</h3></u>
            {{end}}
        <div class="col-md-3">
            
            <div class="card" style="width: 18rem;">
                <img src="/public/assets/images/{{$date.ImageLink}}" class="card-img-top" alt="{{$date.Name}}">
                <div class="card-body">
                    <h5 class="card-title text-center">{{$date.Name}}</h5>
                    <p class="card-text">{{$date.Description}}</p>
                    <p class="card-text"><small class="text-body-secondary">Last updated: {{formatDate $date.UpdatedAt "02-Jan-2006"}}</small></p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title text-center">Package Details:</h5>
                </div>
                <hr>
                <table class="table table-primary table-hover">
                    <tbody>
                        <tr>
                            <th>Plan:</th>
                            <td>{{$date.PlanTitle}}</td>
                        </tr>
                        <tr>
                            <th>Name:</th>
                            <td>{{$date.Name}}</td>
                        </tr>
                        <tr>
                            <th>Plan Description:</th>
                            <td>{{$date.PlanDescription}}</td>
                        </tr>
                        <tr>
                            <th>Package Weight:</th>
                            <td>{{$date.PackageWeight}}KG</td>
                        </tr>
                        <tr>
                            <th>Package Price:</th>
                            <td>{{formatCurrency $date.PackagePrice}}</td>  
                        </tr>                
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="row mt-5 d-flex justify-content-center" >
        <div class="col-md-6">
            <div class="col">
                <h5 class="text-center">Buy Now</h5>
                <div class="alert alert-danger text-center d-none" id="card-messages"></div>
                <form action="/payment-succeeded-temp"  method="post"
                    name="charge_form" id="charge_form"
                    class="d-block needs-validation charge-form" autocomplete="off" novalidate="">
                    
                    <input type="hidden" id="amount" name="amount" value="{{$date.PackagePrice}}">
                    <input type="hidden" id="product_id" name="product_id" value="{{$date.ID}}">
                    <input type="hidden" id="package_quantity" name="package_quantity" value="{{$date.PackageWeight}}">
                    <div class="mb-3">
                        <label for="first_name" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="first_name" name="first_name" 
                            required="" autocomplete="first_name-new">
                    </div>
                    
                    <div class="mb-3">
                        <label for="last_name" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="last_name" name="last_name" 
                            required="" autocomplete="last_name-new">
                    </div>
        
                    <div class="mb-3">
                        <label for="cardholder_email" class="form-label">Card Holder Email</label>
                        <input type="text" class="form-control" id="cardholder_email" name="cardholder_email" 
                            required="" autocomplete="cardholder_email-new">
                    </div>
        
                    <div class="mb-3">
                        <label for="cardholder_name" class="form-label">Name on Card</label>
                        <input type="text" class="form-control" id="cardholder_name" name="cardholder_name" 
                            required="" autocomplete="cardholder_name-new">
                    </div>
                    
                    <!-- card number will be built by stripe -->
                    <div class="mb-3">
                        <label for="card-element" class="form-label">Credit Card</label>
                        <div id="card-element" class="form-control"></div>
                        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
                        <div class="alert-success text-center" id="card-success" role="alert"></div>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-center">
                        <a href="javascript:void(0)" id="pay-button" class="btn btn-primary" onclick="val()">Pay {{formatCurrency $date.PackagePrice}}/month</a>
                        <div id="processing-payment" class="text-center d-none">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                        </div>
                    </div>
        
                    <!-- hidden fields -->
                    <input type="hidden" name="payment_intent" id="payment_intent">
                    <input type="hidden" name="payment_method" id="payment_method">
                    <input type="hidden" name="payment_amount" id="payment_amount">
                    <input type="hidden" name="payment_currency" id="payment_currency">
                </form>
            </div>
        </div>
    </div>
</div>

   
{{end}}

{{define "js"}}
{{$date := index .Data "dates"}}
<script src="https://js.stripe.com/v3/"></script>

<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById('card-messages');
    const payButton = document.getElementById('pay-button');
    const processing = document.getElementById('processing-payment')
    stripe = Stripe('{{.StripePublishableKey}}')

    function showPayButton(){
        payButton.classList.remove('d-none');
        processing.classList.add('d-none');
    }

    function hidePayButton(){
        payButton.classList.add('d-none');
        processing.classList.remove('d-none');
    }

    function showCardError(msg){
        cardMessages.classList.add('alert')
        cardMessages.classList.add('alert-danger')
        cardMessages.classList.remove('alert-success')
        cardMessages.classList.remove('d-none');
        processing.classList.remove('d-none');
        document.getElementById('card-errors').classList.add('d-none');
        cardMessages.innerText = msg
        
    }

    function showCardSuccess(){
        cardMessages.classList.add('alert')
        cardMessages.classList.add('alert-success')
        cardMessages.classList.remove('alert-danger')
        cardMessages.classList.remove('d-none');
        cardMessages.innerText = "Transaction Successful"
        processing.classList.add('d-none');
    }

    function val() {
        let form = document.getElementById('charge_form')
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add('was-validated');
            return
        }
        form.classList.add('was-validated');
        hidePayButton();
        
        let amountToCharge = document.getElementById('amount').value;
        
        stripe.createPaymentMethod({
            type: 'card',
            card: card,
            billing_details: {
                email: document.getElementById('cardholder_email').value,
            },
        }).then(stripePaymentMethodHandler);
    }

    function stripePaymentMethodHandler(result){
        if (result.error) {
            showCardError(result.error.message);
        } else {
            //create a customer and subscribe to plan
            let payload = {
                product_id: document.getElementById("product_id").value,
                plan_id: '{{$date.PlanID}}',
                amount : document.getElementById('amount').value,
                currency: 'cad',
                payment_method: result.paymentMethod.id,
                card_brand: result.paymentMethod.card.brand,
                last_four_digits: result.paymentMethod.card.last4,
                expiry_month: result.paymentMethod.card.exp_month,
                expiry_year: result.paymentMethod.card.exp_year,
                first_name: document.getElementById('first_name').value,
                last_name: document.getElementById('last_name').value,
                email: document.getElementById('cardholder_email').value,  
            }
        
            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload),
                
            }
            console.log(payload);

            fetch('{{.API}}/api/create-customer-and-subscribe-to-plan', requestOptions)
            .then(response => response.json())
            .then(function(data) {
                console.log(data);
                processing.classList.add('d-none');
                showCardSuccess();
                // After successful payment
                sessionStorage.setItem('first_name', document.getElementById('first_name').value);
                sessionStorage.setItem('last_name', document.getElementById('last_name').value);
                sessionStorage.setItem('email', document.getElementById('cardholder_email').value);
                sessionStorage.setItem('amount', '{{formatCurrency $date.PackagePrice}}');
                sessionStorage.setItem('last_four_digits', result.paymentMethod.card.last4);

                // Redirect to the receipt page
                location.href = "/receipt/bronze";

            })
        }
    }

    (function() {
        //Create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
            }
        };

        //create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount('#card-element')

        //check for input errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.classList.add('alert');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.classList.add('alert');
                displayError.textContent = '';
            }
        })
    })();
</script>
{{end}}